<?php

namespace ContainerRdsxqJh;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_DoctrineMongodb_Odm_Command_EncryptionDiagnostic_LazyService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.doctrine_mongodb.odm.command.encryption_diagnostic.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/SignalableCommandInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.doctrine_mongodb.odm.command.encryption_diagnostic.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('doctrine:mongodb:encryption:diagnostic', [], 'Diagnose MongoDB configuration and server capabilities for each connection.', false, #[\Closure(name: 'doctrine_mongodb.odm.command.encryption_diagnostic', class: 'Doctrine\\Bundle\\MongoDBBundle\\Command\\Encryption\\DiagnosticCommand')] fn (): \Doctrine\Bundle\MongoDBBundle\Command\Encryption\DiagnosticCommand => ($container->privates['doctrine_mongodb.odm.command.encryption_diagnostic'] ?? $container->load('getDoctrineMongodb_Odm_Command_EncryptionDiagnosticService')));
    }
}
